apiVersion: apps/v1
kind: Deployment
metadata:
  name: ranti-main-k8s
spec:
  selector:
    matchLabels:
      app: ranti-main-k8s
  replicas: 1
  template:
    metadata:
      labels:
        app: ranti-main-k8s
    spec:
      containers:
        - name: ranti-main-k8s
          image: ranti-main-k8s:1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5000
          env:   # Setting Enviornmental Variables
            - name: JDBC   # Setting Database host address
              value: jdbc:mysql://mysql/ranti?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=GMT

#            - name: SERVER_PORT   # Setting Database host address
#              value: 5000

            - name: GOOGLE_ID   # Setting Database host address
              value: 554059125052-l70dski1muhsidsfbbc79kftdoiarjqd.apps.googleusercontent.com

            - name: GOOGLE_SECRET   # Setting Database host address
              value: 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

#            - name: DB_HOST   # Setting Database host address from configMap
#              value:
#              valueFrom :
#                configMapKeyRef :
#                  name : db-config
#                  key :  host

            - name: DB_NAME  # Setting Database name from configMap
              value: ranti
#              valueFrom :
#                configMapKeyRef :
#                  name : db-config
#                  key :  dbName

            - name: DB_USER  # Setting Database username from Secret
             # value: root
              valueFrom :
                secretKeyRef :
                  name : mysql-secrets
                  key :  username

            - name: DB_PASSWORD # Setting Database password from Secret
#              value: root
              valueFrom :
                secretKeyRef :
                  name : mysql-secrets
                  key :  password

---

apiVersion: v1 # Kubernetes API version
kind: Service # Kubernetes resource kind we are creating
metadata: # Metadata of the resource kind we are creating
  name: ranti-main-svc
spec:
  selector:
    app: ranti-main-k8s
  ports:
    - protocol: "TCP"
      port: 8080 # The port that the service is running on in the cluster
      targetPort: 8080 # The port exposed by the service
      nodePort: 32080
  type: NodePort # type of the service.